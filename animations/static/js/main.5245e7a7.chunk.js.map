{"version":3,"sources":["components/Animation.js","components/App.js","serviceWorker.js","index.js"],"names":["Animation","props","draw","width","height","canvasReference","useRef","useEffect","ctx","current","getContext","animationFrameId","frameCount","render","window","requestAnimationFrame","cancelAnimationFrame","className","ref","App","Math","min","innerWidth","innerHeight","img","createImageData","canvas","data","xc","yc","i","length","t","k","putImageData","src","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAiCeA,MA/Bf,SAAmBC,GAAQ,IACfC,EAAwBD,EAAxBC,KAAMC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,OACfC,EAAkBC,iBAAO,MAmB/B,OAjBAC,qBAAU,WACN,IAAIC,EAAMH,EAAgBI,QAAQC,WAAW,MAC7CR,EAAKM,EAAK,GAEV,IACIG,EADAC,EAAa,EAQjB,OANA,SAASC,IACLD,IACAV,EAAKM,EAAKI,GACVD,EAAmBG,OAAOC,sBAAsBF,GAEpDA,GACO,WACHC,OAAOE,qBAAqBL,MAEjC,CAACT,IAGA,4BACIe,UAAU,SACVC,IAAKb,EACLF,MAAOA,EACPC,OAAQA,K,KC0BLe,MAlDf,WACE,IACMhB,EAAQiB,KAAKC,IAAIP,OAAOQ,WAAa,GAAIR,OAAOS,aAChDnB,EAASD,EAsCf,OACE,6BAEE,kBAAC,EAAD,CAAWD,KAvCf,SAAcM,EAAKI,GAKjB,IAJA,IAAIY,EAAMhB,EAAIiB,gBAAgBjB,EAAIkB,OAAOvB,MAAOK,EAAIkB,OAAOtB,QACvDuB,EAAOH,EAAIG,KAELC,EAAK,EAAGC,EAAK,EACdC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,GAAK,EAAG,CAIvC,IAEIE,EADAC,EAAIrB,EAAU,KAHdR,EAAS,EAAIyB,KAKNG,EAAPC,EAHI,IAGOA,EACN,IAAMA,EAAI,GAEL,IAAO,GATjBL,EAAK,EAAIzB,EAAQ,IASU6B,EAAI,IAAO,GACxCL,EAAKG,GAAM,EAAEE,EAAK,IAClBL,EAAKG,EAAI,GAAM,EAAEE,EAAK,IACtBL,EAAKG,EAAI,GAAM,EAAEE,EAAK,MAGtBL,EAAKG,GAAK,IACVH,EAAKG,EAAI,GAAK,IACdH,EAAKG,EAAI,GAAK,KAEhBH,EAAKG,EAAI,GAAK,MAEdF,IACWzB,IACTyB,EAAK,EACLC,KAGJrB,EAAI0B,aAAaV,EAAK,EAAG,IAMArB,MAAOA,EAAOC,OAAQA,EAAQ+B,IA3C1C,2FCOGC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAAS3B,OACP,kBAAC,IAAM4B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5245e7a7.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\r\n\r\nfunction Animation(props) {\r\n    const { draw, width, height } = props;\r\n    const canvasReference = useRef(null);\r\n\r\n    useEffect(() => {\r\n        var ctx = canvasReference.current.getContext('2d');\r\n        draw(ctx, 0);\r\n\r\n        let frameCount = 0;\r\n        let animationFrameId;\r\n        function render() {\r\n            frameCount++;\r\n            draw(ctx, frameCount);\r\n            animationFrameId = window.requestAnimationFrame(render);\r\n        }\r\n        render();\r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n        }\r\n    }, [draw]);\r\n\r\n    return (\r\n        <canvas\r\n            className=\"border\"\r\n            ref={canvasReference}\r\n            width={width}\r\n            height={height}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Animation;\r\n\r\n// var img = new Image();\r\n// img.src = 'sunset';\r\n// ctx.drawImage(img, 0, 0);\r\n// console.log(ctx);","import React from 'react';\nimport Animation from './Animation';\nimport './App.css';\n\nfunction App() {\n  const sunset = \"https://www.visitaparadise.com/wp-content/themes/yootheme/cache/sunset-d863fdd4.jpeg\";\n  const width = Math.min(window.innerWidth - 26, window.innerHeight);\n  const height = width;\n\n  function draw(ctx, frameCount) {\n    var img = ctx.createImageData(ctx.canvas.width, ctx.canvas.height);\n    var data = img.data;\n\n    var x, y, xc = 0, yc = 0;\n    for (var i = 0; i < data.length; i += 4) {\n      x = xc + 1 - width / 2;\n      y = height / 2 - yc;\n\n      var q = 100;\n      var k = frameCount % (2*q);\n      var t;\n      if (k < q) t = k;\n      else t = 2*q - k - 1;\n\n      if ((y / (t / 10)) % 2 > (x / (t / 10)) % 2) {\n        data[i] = (7*t) % 256;\n        data[i + 1] = (5*t) % 256;\n        data[i + 2] = (3*t) % 256;\n      }\n      else {\n        data[i] = 255;\n        data[i + 1] = 255;\n        data[i + 2] = 255;\n      }\n      data[i + 3] = 255;\n\n      xc++;\n      if (xc === width) {\n        xc = 0;\n        yc++;\n      }\n    }\n    ctx.putImageData(img, 0, 0);\n  }\n\n  return (\n    <div>\n      {/* <img style={{ width: \"100%\" }} src={sunset} alt=\"oops\" /> */}\n      <Animation draw={draw} width={width} height={height} src={sunset} />\n    </div>\n  );\n\n};\n\nexport default App;\n\n// x = (i / 4) % ctx.canvas.width;\n// y = Math.floor((i / 4) / ctx.canvas.width);\n// x = x - width / 2;\n// y = height / 2 - y;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}