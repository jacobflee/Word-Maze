{"version":3,"sources":["components/draw.js","components/Animation.js","components/Form.js","components/App.js","serviceWorker.js","index.js"],"names":["draw","ctx","frameCount","conditions","width","height","imgData","createImageData","canvas","pixels","data","xc","yc","i","length","t","k","putImageData","Animation","props","canvasReference","useRef","useEffect","animationFrameId","current","getContext","render","window","requestAnimationFrame","cancelAnimationFrame","className","ref","Form","handleChange","handleSubmit","eqComponents","eqInput","inputValid","type","name","value","onChange","onClick","style","display","App","Math","min","innerWidth","innerHeight","useState","op","eq","setEq","setEqInput","opInput","setOpInput","setInputValid","useCallback","Function","eqString","forEach","item","eqToString","map","eqComp","key","event","target","eqNew","push","preventDefault","concat","id","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0fdb3026.chunk.js","sourcesContent":["\r\n// IMAGE ISSUE\r\n\r\n// OPTION FOR RECYCLE CANVAS ISSUE\r\n// const imgData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\nfunction draw(ctx, frameCount, conditions, width, height) {\r\n    const imgData = ctx.createImageData(ctx.canvas.width, ctx.canvas.height);\r\n    var pixels = imgData.data;\r\n\r\n    var x, y, xc = 0, yc = 0;\r\n    for (var i = 0; i < pixels.length; i += 4) {\r\n        x = xc + 1 - width / 2;\r\n        y = height / 2 - yc;\r\n\r\n        const tmax = 150;\r\n        const k = frameCount % (2 * tmax);\r\n        var t;\r\n        if (k < tmax) t = k;\r\n        else t = 2 * tmax - k - 1;\r\n\r\n        if (conditions(x, y, t)) {\r\n            pixels[i] = (3 * t) % 256;\r\n            pixels[i + 1] = (2 * t) % 256;\r\n            pixels[i + 2] = (5 * t) % 256;\r\n        }\r\n        pixels[i + 3] = 255;\r\n\r\n        xc++;\r\n        if (xc === width) {\r\n            xc = 0;\r\n            yc++;\r\n        }\r\n    }\r\n\r\n    ctx.putImageData(imgData, 0, 0);\r\n}\r\n\r\nexport default draw;","import React, { useRef, useEffect } from 'react';\r\nimport draw from './draw';\r\n\r\nfunction Animation(props) {\r\n  const { conditions, width, height } = props;\r\n  const canvasReference = useRef(null);\r\n\r\n  useEffect(() => {\r\n    var ctx = canvasReference.current.getContext('2d');\r\n    var animationFrameId;\r\n    var frameCount = 0;\r\n    function render() {\r\n      frameCount++;\r\n      draw(ctx, frameCount, conditions, width, height);\r\n      animationFrameId = window.requestAnimationFrame(render);\r\n    }\r\n    render();\r\n\r\n    return () => { window.cancelAnimationFrame(animationFrameId) };\r\n  }, [conditions, width, height]);\r\n\r\n  return (\r\n    <canvas\r\n      className=\"border\"\r\n      ref={canvasReference}\r\n      width={width}\r\n      height={height}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Animation;\r\n","import React from 'react';\r\n\r\nfunction Form(props) {\r\n    const { handleChange, handleSubmit, eqComponents, eqInput, inputValid } = props;\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                type=\"text\"\r\n                name=\"eqInput\"\r\n                value={eqInput}\r\n                onChange={handleChange}\r\n            />\r\n            <button onClick={handleSubmit}> Add </button>\r\n            <br />\r\n            <span style={{ display: inputValid ? \"none\" : \"block\" }} > invalid eq syntax </span>\r\n            <input\r\n                type=\"radio\"\r\n                name=\"opInput\"\r\n                value=\"&&\"\r\n                onChange={handleChange}\r\n            /> AND\r\n            <br />\r\n            <input\r\n                type=\"radio\"\r\n                name=\"opInput\"\r\n                value=\"||\"\r\n                onChange={handleChange}\r\n            /> OR\r\n            {eqComponents}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;\r\n","/* eslint-disable no-throw-literal */\n/* eslint-disable no-new-func */\nimport React, { useState, useCallback } from 'react';\nimport Animation from './Animation';\nimport Form from './Form';\nimport './App.css';\n\nfunction App() {\n  // NO useCallback\n  const width = Math.min(window.innerWidth - 8, window.innerHeight - 8);\n  const height = width;\n  const [eq, setEq] = useState([\n    {\n      op: null,\n      eq: \"Math.sin(x*Math.pow(t, 0.2)) > Math.cos(y*Math.pow(t, 0.2))\"\n    },\n    {\n      op: \"&&\",\n      eq: \"x*x + y*y < t*t\"\n    }\n  ]);\n  // MAYBE useCallback\n  const [eqInput, setEqInput] = useState(\"\");\n  const [opInput, setOpInput] = useState(null);\n  const [inputValid, setInputValid] = useState(true);\n  // YES useCallback\n  const conditions = useCallback(\n    new Function(\"x\", \"y\", \"t\", \"return \" + eqToString()),\n    [eq]\n  );\n  const eqComponents = useCallback(\n    eq.map((item) => {\n      var eqComp = \"\";\n      if (item.op)\n        eqComp += item.op === '&&' ? \"AND \" : \"OR \";\n      eqComp += item.eq;\n      return (\n        <div key={item.eq}>\n          <button\n            name=\"remove\"\n            value={item.eq}\n            onClick={handleChange}> X </button>\n          <span>{eqComp}</span>\n        </div>\n      );\n    }),\n    [eq]\n  );\n\n  function eqToString() {\n    var eqString = \"\";\n    eq.forEach((item) => {\n      if (item.op)\n        eqString += item.op;\n      eqString += item.eq;\n    });\n    return eqString;\n  }\n\n  function evaluateInputValidity() {\n    setInputValid(opInput);\n    // evaluates that eqInput is a valid inequality\n  }\n\n  function handleChange(event) {\n    const { name, value } = event.target;\n    if (name === \"remove\") {\n      var eqNew = [];\n      eq.forEach((item) => {\n        if (item.eq !== value)\n          eqNew.push(item);\n      });\n      if (eqNew[0] && eqNew[0].op)\n        eqNew[0].op = null;\n      setEq(eqNew);\n    } else if (name === \"eqInput\")\n      setEqInput(value);\n    else if (name === \"opInput\")\n      setOpInput(value);\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    evaluateInputValidity();\n    if (opInput && inputValid) {\n      const eqNew = eq.concat({\n        id: eq.length,\n        op: opInput,\n        eq: eqInput\n      });\n      setEq(eqNew);\n    }\n  }\n\n  return (\n    <div>\n      <Form\n        handleChange={handleChange}\n        handleSubmit={handleSubmit}\n        eqComponents={eqComponents}\n        eqInput={eqInput}\n        inputValid={inputValid}\n      />\n      <br />\n      <Animation\n        conditions={conditions}\n        width={width}\n        height={height}\n      />\n    </div>\n  );\n}\n\nexport default App;\n\n// interesting conditions\n// \n// x = (i / 4) % ctx.canvas.width;\n// y = Math.floor((i / 4) / ctx.canvas.width);\n// x = x - width / 2;\n// y = height / 2 - y;\n\n// Math.sin(x*Math.pow(t, 0.2)) > Math.cos(y*Math.pow(t, 0.2))\n// && x*x + y*y < t*t\n\n// x*y*Math.sin(x*y) > t*t\n\n// Math.abs(x*y) > t\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}