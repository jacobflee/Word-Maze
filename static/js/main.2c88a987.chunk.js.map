{"version":3,"sources":["components/Animation.js","components/App.js","serviceWorker.js","index.js"],"names":["Animation","props","draw","width","height","canvasReference","useRef","useEffect","animationFrameId","ctx","current","getContext","frameCount","render","window","requestAnimationFrame","console","log","cancelAnimationFrame","className","ref","App","defaultEq","state","imgSrc","Math","min","innerWidth","innerHeight","equation","conditions","Function","isValid","bind","handleChange","handleSubmit","isValidEquation","x","y","imgData","createImageData","canvas","pixels","data","xc","yc","i","length","this","t","k","putImageData","eq","newCond","error","setState","event","target","value","preventDefault","onSubmit","type","onChange","style","display","source","Component","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oSAsCeA,MApCf,SAAmBC,GAAQ,IACfC,EAAwBD,EAAxBC,KAAMC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,OACfC,EAAkBC,iBAAO,MAwB/B,OAlBAC,qBAAU,WACN,IAIIC,EAJAC,EAAMJ,EAAgBK,QAAQC,WAAW,MAGzCC,EAAa,EAQjB,OANA,SAASC,IACLD,IACAV,EAAKO,EAAKG,GACVJ,EAAmBM,OAAOC,sBAAsBF,GAEpDA,GACO,WACHG,QAAQC,IAAI,cACZH,OAAOI,qBAAqBV,MAEjC,CAACN,IAGA,4BACIiB,UAAU,SACVC,IAAKf,EACLF,MAAOA,EACPC,OAAQA,KCuELiB,G,yDAlGb,aAAe,IAAD,sBAEZ,IAAIC,EAAY,iFAFJ,OACZ,gBAEKC,MAAQ,CACXC,OAAQ,uFACRrB,MAAOsB,KAAKC,IAAIZ,OAAOa,WAAa,EAAGb,OAAOc,YAAc,GAC5DxB,OAAQqB,KAAKC,IAAIZ,OAAOa,WAAa,EAAGb,OAAOc,YAAc,GAC7DC,SAAUP,EACVQ,WAAY,IAAIC,SAAS,IAAK,IAAK,IAAK,WAAaT,EAAY,KACjEU,SAAS,GAGX,EAAK9B,KAAO,EAAKA,KAAK+B,KAAV,gBACZ,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,gBAAkB,EAAKA,gBAAgBH,KAArB,gBAfX,E,iDAkBTxB,EAAKG,GAMR,IAJA,IAGIyB,EAAGC,EAHHC,EAAU9B,EAAI+B,gBAAgB/B,EAAIgC,OAAOtC,MAAOM,EAAIgC,OAAOrC,QAC3DsC,EAASH,EAAQI,KAEXC,EAAK,EAAGC,EAAK,EACdC,EAAI,EAAGA,EAAIJ,EAAOK,OAAQD,GAAK,EAAG,CACzCT,EAAIO,EAAK,EAAII,KAAKzB,MAAMpB,MAAQ,EAChCmC,EAAIU,KAAKzB,MAAMnB,OAAS,EAAIyC,EAE5B,IAEII,EADAC,EAAItC,EAAU,IAEJqC,EAAVC,EAHO,IAGOA,EACT,IAAWA,EAAI,EAEpBF,KAAKzB,MAAMO,WAAWO,EAAGC,EAAGW,KAC9BP,EAAOI,GAAM,EAAIG,EAAK,IACtBP,EAAOI,EAAI,GAAM,EAAIG,EAAK,IAC1BP,EAAOI,EAAI,GAAM,EAAIG,EAAK,KAE5BP,EAAOI,EAAI,GAAK,MAEhBF,IACWI,KAAKzB,MAAMpB,QACpByC,EAAK,EACLC,KAIJpC,EAAI0C,aAAaZ,EAAS,EAAG,K,sCAGfa,GACd,IACgB,IAAIrB,SAAS,IAAK,IAAK,IAAK,WAAaqB,EAAK,IAC5DC,CAAQ,EAAG,EAAG,GACd,MAAOC,GAEP,OADAN,KAAKO,SAAS,CAAEvB,SAAS,KAClB,EAGT,OADAgB,KAAKO,SAAS,CAAEvB,SAAS,KAClB,I,mCAGIwB,GACXR,KAAKO,SAAS,CAAE1B,SAAU2B,EAAMC,OAAOC,U,mCAG5BF,GACXA,EAAMG,iBACFX,KAAKZ,gBAAgBY,KAAKzB,MAAMM,WAClCmB,KAAKO,SAAS,CAAEzB,WAAY,IAAIC,SAAS,IAAK,IAAK,IAAK,WAAaiB,KAAKzB,MAAMM,SAAW,S,+BAI7F,OACE,6BACE,0BAAM+B,SAAUZ,KAAKb,cACnB,2BACE0B,KAAK,OACLH,MAAOV,KAAKzB,MAAMM,SAClBiC,SAAUd,KAAKd,eAEjB,yCACA,0BAAM6B,MAAO,CAAEC,QAAShB,KAAKzB,MAAMS,QAAU,QAAU,SAAvD,4BAEF,6BACA,kBAAC,EAAD,CACE9B,KAAM8C,KAAK9C,KACXC,MAAO6C,KAAKzB,MAAMpB,MAClBC,OAAQ4C,KAAKzB,MAAMnB,OACnB6D,OAAQjB,KAAKzB,MAAMC,c,GA3FX0C,cCOEC,QACW,cAA7BrD,OAAOsD,SAASC,UAEe,UAA7BvD,OAAOsD,SAASC,UAEhBvD,OAAOsD,SAASC,SAASC,MACvB,2DCZNC,IAAS1D,OACP,kBAAC,IAAM2D,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3B,GACLtC,QAAQsC,MAAMA,EAAM4B,c","file":"static/js/main.2c88a987.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\r\n\r\nfunction Animation(props) {\r\n    const { draw, width, height } = props;\r\n    const canvasReference = useRef(null);\r\n\r\n    // var img = new Image();\r\n    // img.setAttribute('crossOrigin', 'anonymous');\r\n    // img.src = source;\r\n\r\n    useEffect(() => {\r\n        var ctx = canvasReference.current.getContext('2d');\r\n        // ctx.drawImage(img, 0, 0);\r\n\r\n        let frameCount = 0;\r\n        let animationFrameId;\r\n        function render() {\r\n            frameCount++;\r\n            draw(ctx, frameCount);\r\n            animationFrameId = window.requestAnimationFrame(render);\r\n        }\r\n        render();\r\n        return () => {\r\n            console.log(\"whats this\");\r\n            window.cancelAnimationFrame(animationFrameId);\r\n        }\r\n    }, [draw]); \r\n\r\n    return (\r\n        <canvas\r\n            className=\"border\"\r\n            ref={canvasReference}\r\n            width={width}\r\n            height={height}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Animation;\r\n\r\n// var img = new Image();\r\n// img.src = 'sunset';\r\n// ctx.drawImage(img, 0, 0);\r\n// console.log(ctx);","import { render } from '@testing-library/react';\nimport React, { Component } from 'react';\nimport Animation from './Animation';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    var defaultEq = \"Math.sin(x*Math.pow(t, 0.2)) > Math.cos(y*Math.pow(t, 0.2)) && x*x + y*y < t*t\";\n    this.state = {\n      imgSrc: \"https://www.visitaparadise.com/wp-content/themes/yootheme/cache/sunset-d863fdd4.jpeg\",\n      width: Math.min(window.innerWidth - 8, window.innerHeight - 8),\n      height: Math.min(window.innerWidth - 8, window.innerHeight - 8),\n      equation: defaultEq,\n      conditions: new Function(\"x\", \"y\", \"t\", \"return (\" + defaultEq + \")\"),\n      isValid: false\n    };\n\n    this.draw = this.draw.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.isValidEquation = this.isValidEquation.bind(this);\n  }\n\n  draw(ctx, frameCount) {\n    // var imgData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n    var imgData = ctx.createImageData(ctx.canvas.width, ctx.canvas.height);\n    var pixels = imgData.data;\n\n    var x, y, xc = 0, yc = 0;\n    for (var i = 0; i < pixels.length; i += 4) {\n      x = xc + 1 - this.state.width / 2;\n      y = this.state.height / 2 - yc;\n\n      var tmax = 150;\n      var k = frameCount % (2 * tmax);\n      var t;\n      if (k < tmax) t = k;\n      else t = 2 * tmax - k - 1;\n\n      if (this.state.conditions(x, y, t)) {\n        pixels[i] = (3 * t) % 256;\n        pixels[i + 1] = (2 * t) % 256;\n        pixels[i + 2] = (5 * t) % 256;\n      }\n      pixels[i + 3] = 255;\n\n      xc++;\n      if (xc === this.state.width) {\n        xc = 0;\n        yc++;\n      }\n    }\n\n    ctx.putImageData(imgData, 0, 0);\n  }\n\n  isValidEquation(eq) {\n    try {\n      var newCond = new Function(\"x\", \"y\", \"t\", \"return (\" + eq + \")\");\n      newCond(0, 0, 0);\n    } catch (error) {\n      this.setState({ isValid: true });\n      return false;\n    }\n    this.setState({ isValid: false });\n    return true;\n  }\n\n  handleChange(event) {\n    this.setState({ equation: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if (this.isValidEquation(this.state.equation))\n      this.setState({ conditions: new Function(\"x\", \"y\", \"t\", \"return (\" + this.state.equation + \")\") });\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            value={this.state.equation}\n            onChange={this.handleChange}\n          />\n          <button>Enter</button>\n          <span style={{ display: this.state.isValid ? \"block\" : \"none\" }}>invalid equation syntax</span>\n        </form>\n        <br />\n        <Animation\n          draw={this.draw}\n          width={this.state.width}\n          height={this.state.height}\n          source={this.state.imgSrc}\n        />\n      </div>\n    );\n  }\n\n};\n\nexport default App;\n\n// x = (i / 4) % ctx.canvas.width;\n// y = Math.floor((i / 4) / ctx.canvas.width);\n// x = x - width / 2;\n// y = height / 2 - y;\n\n// Math.sin(x*Math.pow(t, 0.2)) > Math.cos(y*Math.pow(t, 0.2))\n// && x*x + y*y < t*t\n\n// x*y*Math.sin(x*y) > t*t\n\n// Math.abs(x*y) > t\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}